version = "3.4"


# PRIVATE

[resources]
processes = 0
relative_paths = false # in stat files, output paths relative to the workspace root

[resources.cases]
input = "data/input"
output = "data/output"

[resources.conceptnet]
url = "neo4j://localhost:7687"
username = "neo4j"
password = ""

[resources.nlp]
url = "127.0.0.1:5001"


# PUBLIC

[export]
graph_json = true
graph_pdf = true
grid_stats = true
deliberation = true
aggr_funcs = ["mean", "min", "max"]
retrieval_improvement = true
single_stats = true

[adaptation]
knowledge_graph = "wordnet"

[loading]
# only set to true if the user-defined rules do NOT represent a path in the KG
enforce_node_paths = true


[tuning]
adaptation_lemma_limit = [1]
adaptation_method = ["direct"] # direct, bfs
adaptation_pruning_bfs_limit = [10000]
adaptation_weight_original_concept = [1]
adaptation_weight_rule_target = [1]
# How to prune the paths and/or lemmas of found concepts
# difference: The vector direction between the concepts should match, i.e. min cosine(abs(vec1 - vec2), abs(vec3 - vec4)).
# similarity: The absolute similarity values of the concepts should match, i.e. min abs(cosine(vec1, vec2) - cosine(vec3, vec4)).
adaptation_pruning_selector = ["similarity"]

# NOUN, PROPN (not in WordNet), VERB
extraction_keyword_pos_tags = [["NOUN", "VERB"]]
extraction_keywords_per_adu = [false]
extraction_max_concepts = [10000]

global_rule_limit = [1]

nlp_embeddings = ["use-small"] # glove, sbert, use-small, use-large, roberta
nlp_similarity = ["cosine"] # dynamax

# Of which metrics should the score consist
# score_adus_sem_sim = [0, 1]
# score_concept_sem_sim = [1]
# score_hypernym_prox = [0, 1]
# score_keyword_weight = [0, 1]
# score_major_claim_prox = [0, 1]
# score_nodes_path_sim = [0, 1]
score_nodes_sem_sim = [1]
score_nodes_wup_sim = [1]
# score_query_adus_sem_sim = [0, 1]
# score_query_concept_sem_sim = [0, 1]
# score_query_nodes_sem_sim = [0, 1]

threshold_concept_score = [0.0] # Filtering concepts
threshold_node_similarity = [0.0] # Assigning nodes

# between: Try to transfer the concept path from (adaptation origin, adaptation destination) to (current concept, adapted concept).
# within: Try to transfer the concept path from (adaptation origin, current concept) to (adaptation destination, adapted concept).
# bfs_method = ["between"] # within CANNOT be used for generalization!


[nlp]
lang = "en"

[nlp.inflections]
[nlp.inflections.prove]
VBN = ["proven"]


[wordnet]
hypernym_filter = [
    "abstraction.n.06",
    "artifact.n.01",
    "causal_agent.n.01",
    "entity.n.01",
    "living_thing.n.01",
    "mental_object.n.01",
    "object.n.01",
    "physical_entity.n.01",
    "psychological_feature.n.01",
    "thing.n.08",
]
node_context_components = ["examples", "definition"]


[conceptnet]
[conceptnet.node]
follow_form_of = false

[conceptnet.relation]
directed = true
generalization_types = ["IsA"] # "HasA", "DerivedFrom", "IsA", "PartOf"
all_types = [
    "Antonym",
    "AtLocation",
    "CapableOf",
    "Causes",
    "CausesDesire",
    "CreatedBy",
    "DefinedAs",
    "DerivedFrom",
    "Desires",
    "DistinctFrom",
    "Entails",
    "EtymologicallyDerivedFrom",
    "EtymologicallyRelatedTo",
    "ExternalURL",
    "FormOf",
    "HasA",
    "HasContext",
    "HasFirstSubevent",
    "HasLastSubevent",
    "HasPrerequisite",
    "HasProperty",
    "HasSubevent",
    "IsA",
    "IsInstanceOf",
    "LocatedNear",
    "MadeOf",
    "MannerOf",
    "MotivatedByGoal",
    "NotCapableOf",
    "NotDesires",
    "NotHasProperty",
    "ObstructedBy",
    "PartOf",
    "ReceivesAction",
    "RelatedTo",
    "SimilarTo",
    "SymbolOf",
    "Synonym",
    "UsedFor",
]

[conceptnet.path]
[conceptnet.path.max_length]
shortest_path = 20
generalization = 10
metrics = 10
